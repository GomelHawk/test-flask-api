name: "Terragrunt CI/CD Pipeline"

on:
  push:
    branches:
      - main
    paths:
      - '.infrastructure/dev/**'
  pull_request:
    branches:
      - main
    paths:
      - '.infrastructure/dev/**'

jobs:
  terragrunt:
    name: Terragrunt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    env:
      WORKING_DIRECTORY: .infrastructure/dev
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.2
          terraform_wrapper: false

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: 0.72.5

      - name: Terragrunt Init
        id: init
        run: terragrunt run-all init

      - name: Terragrunt Validate
        id: validate
        run: terragrunt run-all validate

      - name: Terragrunt Plan
        id: plan
        run: terragrunt run-all plan

      - name: Terragrunt Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terragrunt Apply
        run: terragrunt run-all apply --terragrunt-non-interactive


  build:
    name: Build image
    runs-on: ubuntu-latest
    needs: terragrunt
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    env:
      WORKING_DIRECTORY: .
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and Push Docker Image
        env:
          ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
        run: |
          pwd
          sed -i 's/APP_ENV=.*/APP_ENV=dev/' .env && sed -i 's/PORT=.*/PORT=80/' .env
          docker build -t dkosh-dev-app:latest .
          docker tag dkosh-dev-app:latest $ECR_URL/dkosh-dev-app:latest
          docker push $ECR_URL/dkosh-dev-app:latest


  deploy:
    name: Deploy image
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    env:
      WORKING_DIRECTORY: .infrastructure/dev/k8s
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install aws-iam-authenticator
        run: |
          curl -o aws-iam-authenticator https://s3.amazonaws.com/amazon-eks/${{ secrets.AWS_DEFAULT_REGION }}/latest/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          sudo mv ./aws-iam-authenticator /usr/local/bin

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name dkosh-terragrunt-cluster

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f ./deployment.yaml
          kubectl apply -f ./service.yaml

      - name: Public addresses info
        run: |
          kubectl get svc dkosh-dev-app
          kubectl describe svc dkosh-dev-app
